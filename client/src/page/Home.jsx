import React, { useEffect, useState } from 'react';
import styled from 'styled-components';
import { Card, FormField, Loader } from '../components';

// Styled-components
const MainContainer = styled.div`
  display: flex;
  flex-direction: column;
  min-height: 100vh;
`;

const ContentArea = styled.section`
  width: 100%;
  max-width: 1200px;
  padding: 6rem 2rem;
  background: linear-gradient(to right, #000000, #3b0a45, #5b2a78, #7f8c8d, #b59d2b, #004d40);
  flex: 1;
  margin: 0 auto;
`;

const Header = styled.div`
  text-align: center;
  margin-bottom: 1.5rem;
`;

const GetStartedButton = styled.button`
  position: absolute;
  top: 2rem;
  right: 14.5rem;
  padding: 1rem;
  background-color: #0077b6;
  color: white;
  font-size: 1.25rem;
  font-weight: bold;
  border: none;
  border-radius: 0.5rem;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
  cursor: pointer;
  transition: background-color 0.3s, transform 0.3s;

  &:hover {
    background-color: #005f73;
    transform: scale(1.05);
  }
`;

const FAQContainer = styled.div`
  max-width: 600px;
  margin: 0 auto;
  padding: 2rem;
  background: white;
  border-radius: 0.5rem;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  position: relative;
`;

const CloseButton = styled.button`
  position: absolute;
  top: 1rem;
  right: 1rem;
  background: red;
  color: white;
  border: none;
  border-radius: 50%;
  width: 2rem;
  height: 2rem;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1.25rem;
  cursor: pointer;
  transition: background 0.3s;

  &:hover {
    background: #e65c50;
  }
`;

const FAQButton = styled.button`
  width: 100%;
  text-align: left;
  font-size: 1.125rem;
  font-weight: bold;
  background: white;
  color: #0077b6;
  border-radius: 0.5rem;
  padding: 1rem;
  margin-bottom: 0.5rem;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  cursor: pointer;
  transition: background 0.3s;

  &:hover {
    background: #e0f7fa;
  }
`;

const Answer = styled.p`
  margin-top: 0.5rem;
  color: black;
  font-size: 1rem;
`;

const RenderCards = ({ data, title }) => {
  if (data?.length > 0) {
    return data.map((post) => <Card key={post._id} {...post} />);
  }

  return <h2 className="mt-5 font-bold text-[#ff6f61] text-xl uppercase">{title}</h2>;
};

const Home = () => {
  const [loading, setLoading] = useState(false);
  const [allPosts, setAllPosts] = useState(null);
  const [searchText, setSearchText] = useState('');
  const [searchTimeout, setSearchTimeout] = useState(null);
  const [searchedResults, setSearchedResults] = useState(null);
  const [showAnswers, setShowAnswers] = useState(false);
  const [activeQuestion, setActiveQuestion] = useState(null);

  const OPENAI_API_KEY = import.meta.env.VITE_OPENAI_API_KEY;
  const fetchPosts = async () => {
    setLoading(true);

    try {
      const response = await fetch('https://api.openai.com/v1/images/generations', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${OPENAI_API_KEY}`,
        },
      });

      if (response.ok) {
        const result = await response.json();
        setAllPosts(result.data.reverse());
      }
    } catch (err) {
      alert(err);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchPosts();
  }, []);

  const handleSearchChange = (e) => {
    clearTimeout(searchTimeout);
    setSearchText(e.target.value);

    setSearchTimeout(
      setTimeout(() => {
        const searchResult = allPosts.filter((item) =>
          item.name.toLowerCase().includes(searchText.toLowerCase()) ||
          item.prompt.toLowerCase().includes(searchText.toLowerCase())
        );
        setSearchedResults(searchResult);
      }, 500)
    );
  };

  const toggleAnswers = (question) => {
    if (activeQuestion === question) {
      setShowAnswers(!showAnswers);
    } else {
      setShowAnswers(true);
      setActiveQuestion(question);
    }
  };

  const handleCloseFAQ = () => {
    setShowAnswers(false);
    setActiveQuestion(null);
  };

  return (
    <MainContainer>
      <ContentArea>
        <GetStartedButton onClick={() => setShowAnswers(!showAnswers)}>
          Don't know where to start? Get Started here
        </GetStartedButton>

        <Header>
          <h1 className="font-extrabold text-gold text-4xl md:text-5xl leading-tight mb-4">The Community Showcase</h1>
          <p className="text-gray-200 text-lg md:text-xl max-w-[600px] mx-auto">Browse through a collection of imaginative and visually stunning images generated by DALL-E AI.</p>
        </Header>

        <div className="mt-10">
          <FormField
            labelName="Search posts"
            type="text"
            name="text"
            placeholder="Search something..."
            value={searchText}
            handleChange={handleSearchChange}
            className="bg-white border border-gray-300 rounded-lg p-2 shadow-md focus:ring-2 focus:ring-teal-400 transition-all duration-300"
          />
        </div>

        <div className="mt-12">
          {loading ? (
            <div className="flex justify-center items-center">
              <Loader />
            </div>
          ) : (
            <>
              {searchText && (
                <h2 className="font-medium text-gray-200 text-xl mb-3">
                  Showing Results for <span className="text-white">{searchText}</span>:
                </h2>
              )}
              <div className="grid lg:grid-cols-4 md:grid-cols-3 sm:grid-cols-2 xs:grid-cols-1 gap-4">
                {searchText ? (
                  <RenderCards
                    data={searchedResults}
                    title="No Search Results Found"
                  />
                ) : (
                  <RenderCards
                    data={allPosts}
                    title="No Posts Yet"
                  />
                )}
              </div>
            </>
          )}
        </div>

        {showAnswers && (
          <FAQContainer>
            <CloseButton onClick={handleCloseFAQ}>×</CloseButton>
            <h2 className="text-2xl font-bold mb-4 text-center">Frequently Asked Questions</h2>
            <div className="space-y-4">
              <div>
                <FAQButton onClick={() => toggleAnswers('question1')}>
                  How do I generate an image?
                </FAQButton>
                {showAnswers && activeQuestion === 'question1' && (
                  <Answer>
                    To generate an image, enter a prompt in the search field or click the "Surprise Me" button to get a random prompt. After setting the prompt, click the "Generate Image" button to see your image.
                  </Answer>
                )}
              </div>
              <div>
                <FAQButton onClick={() => toggleAnswers('question2')}>
                  How do I search for posts?
                </FAQButton>
                {showAnswers && activeQuestion === 'question2' && (
                  <Answer>
                    Use the search field at the top of the page to find posts by name or prompt. Type in your keywords and the results will be displayed below.
                  </Answer>
                )}
              </div>
              <div>
                <FAQButton onClick={() => toggleAnswers('question3')}>
                  What should I do if there are no results?
                </FAQButton>
                {showAnswers && activeQuestion === 'question3' && (
                  <Answer>
                    If no results are found, try modifying your search terms or check back later as new posts may be added.
                  </Answer>
                )}
              </div>
            </div>
            <p className="mt-6 text-center text-gray-100">© 2024 Your Company. All rights reserved.</p>
          </FAQContainer>
        )}
      </ContentArea>
    </MainContainer>
  );
};

export default Home;
